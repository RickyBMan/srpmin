!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	t_client.h	/^  struct t_num A;$/;"	m	struct:t_client	typeref:struct:t_client::t_num
ACLOCAL	Makefile	/^ACLOCAL = aclocal$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ALEN	t_client.h	36;"	d
AM_CFLAGS	Makefile	/^AM_CFLAGS = -fPIC$/;"	m
AR	Makefile	/^AR = ar$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = automake$/;"	m
AUTOMAKE_OPTIONS	Makefile	/^AUTOMAKE_OPTIONS = foreign no-dependencies$/;"	m
Abuf	t_client.h	/^  unsigned char abuf[ALEN], Abuf[MAXPARAMLEN];$/;"	m	struct:t_client
B	t_server.h	/^  struct t_num B;$/;"	m	struct:t_server	typeref:struct:t_server::t_num
BIG_INTEGER_ERROR	srp_aux.h	52;"	d
BIG_INTEGER_SUCCESS	srp_aux.h	51;"	d
BLEN	t_server.h	36;"	d
Bbuf	t_server.h	/^  unsigned char saltbuf[MAXSALTLEN], bbuf[BLEN], Bbuf[MAXPARAMLEN];$/;"	m	struct:t_server
BigInteger	srp_aux.h	/^typedef void * BigInteger;$/;"	t
BigInteger	t_math.c	/^typedef BIGNUM * BigInteger;$/;"	t	file:
BigInteger	t_math.c	/^typedef BigInt BigInteger;$/;"	t	file:
BigInteger	t_math.c	/^typedef MP_INT * BigInteger;$/;"	t	file:
BigInteger	t_math.c	/^typedef gcry_mpi_t BigInteger;$/;"	t	file:
BigInteger	t_math.c	/^typedef mp_int * BigInteger;$/;"	t	file:
BigIntegerAdd	t_math.c	/^BigIntegerAdd(result, a1, a2)$/;"	f
BigIntegerAddInt	t_math.c	/^BigIntegerAddInt(result, a1, a2)$/;"	f
BigIntegerBitLen	t_math.c	/^BigIntegerBitLen(b)$/;"	f
BigIntegerByteLen	srp_aux.h	59;"	d
BigIntegerCheckPrime	t_math.c	/^BigIntegerCheckPrime(n, c)$/;"	f
BigIntegerClearFree	t_math.c	/^BigIntegerClearFree(b)$/;"	f
BigIntegerCmp	t_math.c	/^BigIntegerCmp(c1, c2)$/;"	f
BigIntegerCmpInt	t_math.c	/^BigIntegerCmpInt(c1, c2)$/;"	f
BigIntegerCtx	srp_aux.h	/^typedef void * BigIntegerCtx;$/;"	t
BigIntegerCtx	t_math.c	/^typedef BN_CTX * BigIntegerCtx;$/;"	t	file:
BigIntegerCtx	t_math.c	/^typedef void * BigIntegerCtx;$/;"	t	file:
BigIntegerCtxFree	t_math.c	/^BigIntegerCtxFree(ctx)$/;"	f
BigIntegerCtxNew	t_math.c	/^BigIntegerCtxNew()$/;"	f
BigIntegerDivInt	t_math.c	/^BigIntegerDivInt(result, d, m, c)$/;"	f
BigIntegerFinalize	t_math.c	/^BigIntegerFinalize()$/;"	f
BigIntegerFree	t_math.c	/^BigIntegerFree(b)$/;"	f
BigIntegerFromBytes	t_math.c	/^BigIntegerFromBytes(bytes, length)$/;"	f
BigIntegerFromInt	t_math.c	/^BigIntegerFromInt(n)$/;"	f
BigIntegerInitialize	t_math.c	/^BigIntegerInitialize()$/;"	f
BigIntegerLShift	t_math.c	/^BigIntegerLShift(result, x, bits)$/;"	f
BigIntegerMod	t_math.c	/^BigIntegerMod(result, d, m, c)$/;"	f
BigIntegerModAccel	srp_aux.h	/^typedef void * BigIntegerModAccel;$/;"	t
BigIntegerModAccel	t_math.c	/^typedef BN_MONT_CTX * BigIntegerModAccel;$/;"	t	file:
BigIntegerModAccel	t_math.c	/^typedef void * BigIntegerModAccel;$/;"	t	file:
BigIntegerModAccelFree	t_math.c	/^BigIntegerModAccelFree(accel)$/;"	f
BigIntegerModAccelNew	t_math.c	/^BigIntegerModAccelNew(m, c)$/;"	f
BigIntegerModExp	t_math.c	/^BigIntegerModExp(r, b, e, m, c, a)$/;"	f
BigIntegerModInt	t_math.c	/^BigIntegerModInt(d, m, c)$/;"	f
BigIntegerModMul	t_math.c	/^BigIntegerModMul(r, m1, m2, modulus, c)$/;"	f
BigIntegerMul	t_math.c	/^BigIntegerMul(result, m1, m2, c)$/;"	f
BigIntegerMulInt	t_math.c	/^BigIntegerMulInt(result, m1, m2, c)$/;"	f
BigIntegerOK	srp_aux.h	53;"	d
BigIntegerReleaseEngine	t_math.c	/^BigIntegerReleaseEngine()$/;"	f
BigIntegerResult	srp_aux.h	/^typedef int BigIntegerResult;$/;"	t
BigIntegerSub	t_math.c	/^BigIntegerSub(result, s1, s2)$/;"	f
BigIntegerSubInt	t_math.c	/^BigIntegerSubInt(result, s1, s2)$/;"	f
BigIntegerToBytes	t_math.c	/^BigIntegerToBytes(src, dest, destlen)$/;"	f
BigIntegerToCstr	t_math.c	/^BigIntegerToCstr(BigInteger x, cstr * out)$/;"	f
BigIntegerToCstrEx	t_math.c	/^BigIntegerToCstrEx(BigInteger x, cstr * out, int len)$/;"	f
BigIntegerToHex	t_math.c	/^BigIntegerToHex(src, dest, destlen)$/;"	f
BigIntegerToString	t_math.c	/^BigIntegerToString(src, dest, destlen, radix)$/;"	f
BigIntegerUseEngine	t_math.c	/^BigIntegerUseEngine(const char * engine)$/;"	f
CC	Makefile	/^CC = gcc$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -O$/;"	m
CLIENT_CTXP	rfc2945_client.c	47;"	d	file:
CLIENT_CTXP	srp6_client.c	59;"	d	file:
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)$/;"	m
CONCAT	endXXent.h	/^static void CONCAT(_nsw_end,FUNCOBJENT)(int ptr)$/;"	f
CONCAT	getXXbyYY.h	/^RETOBJTYPE CONCAT(NSWPREFIX,FUNCNAME)$/;"	f
CONCAT	nss_defs.h	25;"	d
CONCAT	setXXent.h	/^static void CONCAT(_nsw_set,FUNCOBJENT)(int ptr)$/;"	f
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES = $/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CRYPTOLIB	NTconfig.h	25;"	d
CRYPTOLIB	acconfig.h	13;"	d
Cfree	cstr.c	/^static void Cfree(void * p, void * heap) { free(p); }$/;"	f	file:
Cmalloc	cstr.c	/^static void * Cmalloc(int n, void * heap) { return malloc(n); }$/;"	f	file:
DEFAULT_CONF	t_pwd.h	51;"	d
DEFAULT_PASSWD	t_pwd.h	50;"	d
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H -I. -I$(srcdir) -I.$/;"	m
DESTDIR	Makefile	/^DESTDIR =$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON =  .\/stamp-h.in Makefile.am Makefile.in acconfig.h \\$/;"	m
DLLEXPORT	cstr.h	27;"	d
DLLEXPORT	cstr.h	35;"	d
DLLEXPORT	t_defines.h	54;"	d
DLLEXPORT	t_defines.h	62;"	d
ENABLE_NISEMU	nys_config.h	58;"	d
ENABLE_NSW	nys_config.h	50;"	d
ENABLE_YP	acconfig.h	17;"	d
ENABLE_YPEMU	nys_config.h	57;"	d
ENDPREFIX	endXXent.h	34;"	d
EXPFACTOR	cstr.c	7;"	d	file:
EXTRA_DIST	Makefile	/^EXTRA_DIST = README.API README.math README.speed NTconfig.h makefile.win32 makefile.win32.dep config.h.win32$/;"	m
FILE_NIS	t_pwd.h	/^  FILE_NIS,	\/* Currently accessing file, use NIS if encountered *\/$/;"	e	enum:fstate
FILE_ONLY	t_pwd.h	/^  FILE_ONLY,	\/* Ordinary file, don't consult NIS ever *\/$/;"	e	enum:fstate
FILE_STATE	t_pwd.h	/^} FILE_STATE;$/;"	t	typeref:enum:fstate
FINALOUT	nys_config.h	35;"	d
FSEPARATOR	t_read.c	34;"	d	file:
FUNCNAME	nsw_tconf.c	51;"	d	file:
FUNCNAME	nsw_tconf.c	54;"	d	file:
FUNCNAME	nsw_tpasswd.c	51;"	d	file:
FUNCNAME	nsw_tpasswd.c	54;"	d	file:
FUNCOBJENT	endXXent.h	/^void CONCAT(CONCAT(NSWPREFIX,end),FUNCOBJENT)(void)$/;"	f
FUNCOBJENT	getXXent.h	/^RETOBJTYPE CONCAT(CONCAT(NSWPREFIX,get),FUNCOBJENT)(void)$/;"	f
FUNCOBJENT	nsw_tconf.c	43;"	d	file:
FUNCOBJENT	nsw_tpasswd.c	43;"	d	file:
FUNCOBJENT	setXXent.h	/^void CONCAT(CONCAT(NSWPREFIX,set),FUNCOBJENT)$/;"	f
GCRYPT	acconfig.h	5;"	d
GCRYPT_SHA	t_sha.h	33;"	d
GETPREFIX	getXXent.h	34;"	d
GMP_IMPEXP	t_math.c	60;"	d	file:
GNU_MP	acconfig.h	3;"	d
GTTY	t_defines.h	107;"	d
GTTY	t_defines.h	114;"	d
GTTY	t_defines.h	120;"	d
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
HAVE_LIBDL	config.h	86;"	d
HAVE_LIBNSL	config.h	89;"	d
HAVE_MEMCPY	NTconfig.h	49;"	d
HAVE_MEMCPY	config.h	59;"	d
HAVE_SGTTY_H	config.h	68;"	d
HAVE_SIGACTION	config.h	62;"	d
HAVE_STRCHR	NTconfig.h	52;"	d
HAVE_STRCHR	config.h	65;"	d
HAVE_SYS_IOCTL_H	config.h	71;"	d
HAVE_SYS_TIME_H	config.h	74;"	d
HAVE_TERMIOS_H	config.h	80;"	d
HAVE_TERMIO_H	config.h	77;"	d
HAVE_UNISTD_H	config.h	83;"	d
HEADERS	Makefile	/^HEADERS =  $(include_HEADERS) $(noinst_HEADERS)$/;"	m
HIGHFIRST	NTconfig.h	27;"	d
HIGHFIRST	acconfig.h	19;"	d
HIGHFIRST	config.h	41;"	d
INCLUDES	Makefile	/^INCLUDES = $/;"	m
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL} $(AM_INSTALL_PROGRAM_FLAGS)$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL_PROGRAM}$/;"	m
IN_NIS	t_pwd.h	/^  IN_NIS,	\/* Currently in a '+' entry; use NIS for getXXent *\/$/;"	e	enum:fstate
ITERATIONS_1024	srp6bench.c	226;"	d	file:
ITERATIONS_2048	srp6bench.c	227;"	d	file:
ITERATIONS_4096	srp6bench.c	228;"	d	file:
ITERATIONS_GENERIC	srp6bench.c	230;"	d	file:
LDADD	Makefile	/^LDADD = libsrp.a$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBRARIES	Makefile	/^LIBRARIES =  $(lib_LIBRARIES)$/;"	m
LIBS	Makefile	/^LIBS = -lcrypto -ldl -lnsl $/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@$/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
MAKEINFO	Makefile	/^MAKEINFO = makeinfo$/;"	m
MATH_PRIV	t_math.c	85;"	d	file:
MAXB64PARAMLEN	t_pwd.h	38;"	d
MAXB64SALTLEN	t_pwd.h	44;"	d
MAXHEXPARAMLEN	t_pwd.h	39;"	d
MAXOCTPARAMLEN	t_pwd.h	40;"	d
MAXPARAMBITS	t_pwd.h	36;"	d
MAXPARAMLEN	t_pwd.h	37;"	d
MAXSALTLEN	t_pwd.h	43;"	d
MAXUSERLEN	t_pwd.h	42;"	d
MAX_BASIS_BITS	tconf.c	41;"	d	file:
MINSIZE	cstr.c	8;"	d	file:
MIN_BASIS_BITS	tconf.c	40;"	d	file:
MIN_MOD_BYTES	t_client.h	37;"	d
MPI	acconfig.h	7;"	d
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NO_FCHMOD	t_defines.h	128;"	d
NRUNS	srpbench.c	91;"	d	file:
NSWENTRY	nsw_tconf.c	42;"	d	file:
NSWENTRY	nsw_tpasswd.c	42;"	d	file:
NSWO_DBM	nsswitch.h	/^    NSWO_DBM$/;"	e	enum:nsw_type
NSWO_DNS	nsswitch.h	/^    NSWO_DNS,$/;"	e	enum:nsw_type
NSWO_FILES	nsswitch.h	/^    NSWO_FILES,$/;"	e	enum:nsw_type
NSWO_NIS	nsswitch.h	/^    NSWO_NIS,$/;"	e	enum:nsw_type
NSWO_NISPLUS	nsswitch.h	/^    NSWO_NISPLUS,$/;"	e	enum:nsw_type
NSWO_RETURN	nsswitch.h	/^    NSWO_RETURN,$/;"	e	enum:nsw_type
NSWPREFIX	nss_defs.h	29;"	d
NSWPREFIX	nss_defs.h	32;"	d
NSW_MAXORDER	nsswitch.h	30;"	d
NULL	t_misc.c	49;"	d	file:
NUM_RANDOMS	t_misc.c	285;"	d	file:
OBJECTS	Makefile	/^OBJECTS = $(libsrp_a_OBJECTS) $(tconf_OBJECTS) $(clitest_OBJECTS) $(srvtest_OBJECTS) $(getpwtest_OBJECTS) $(srptest_OBJECTS) $(srpbench_OBJECTS) $(srp6bench_OBJECTS)$/;"	m
OPENSSL	acconfig.h	1;"	d
OPENSSL	config.h	23;"	d
OPENSSL_ENGINE	acconfig.h	15;"	d
OPENSSL_SHA	t_sha.h	15;"	d
P	cstr.h	10;"	d
P	cstr.h	8;"	d
P	t_defines.h	35;"	d
P	t_defines.h	37;"	d
P	t_read.h	35;"	d
P	t_read.h	37;"	d
P	t_sha.h	6;"	d
P	t_sha.h	8;"	d
PACKAGE	Makefile	/^PACKAGE = libsrp$/;"	m
PACKAGE	NTconfig.h	35;"	d
PACKAGE	acconfig.h	27;"	d
PACKAGE	config.h	95;"	d
PATH_NSWCONF	nsswitch.h	29;"	d
PERF_NORM	srpbench.c	92;"	d	file:
PICFLAG	Makefile	/^PICFLAG = -fPIC$/;"	m
POSIX_SIGTYPE	acconfig.h	25;"	d
POSIX_TERMIOS	acconfig.h	23;"	d
POSIX_TERMIOS	config.h	45;"	d
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PREPARAM_1024	srp6bench.c	220;"	d	file:
PREPARAM_2048	srp6bench.c	221;"	d	file:
PREPARAM_4096	srp6bench.c	222;"	d	file:
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	Makefile	/^PROGRAMS =  $(bin_PROGRAMS) $(noinst_PROGRAMS)$/;"	m
R0	t_sha.c	85;"	d	file:
R1	t_sha.c	86;"	d	file:
R2	t_sha.c	87;"	d	file:
R3	t_sha.c	88;"	d	file:
R4	t_sha.c	89;"	d	file:
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
REQOBJTYPE	nsw_tconf.c	52;"	d	file:
REQOBJTYPE	nsw_tconf.c	55;"	d	file:
REQOBJTYPE	nsw_tpasswd.c	52;"	d	file:
REQOBJTYPE	nsw_tpasswd.c	55;"	d	file:
RESPONSE_LEN	t_pwd.h	47;"	d
RETOBJTYPE	nsw_tconf.c	41;"	d	file:
RETOBJTYPE	nsw_tpasswd.c	41;"	d	file:
RETSIGTYPE	NTconfig.h	11;"	d
RETSIGTYPE	config.h	11;"	d
RFC2945_KEY_LEN	srp.h	324;"	d
RFC2945_RESP_LEN	srp.h	325;"	d
SALTLEN	t_pwd.h	45;"	d
SERVER_CTXP	rfc2945_server.c	50;"	d	file:
SERVER_CTXP	srp6_server.c	60;"	d	file:
SESSION_KEY_LEN	t_pwd.h	48;"	d
SETPREFIX	setXXent.h	37;"	d
SHA1Final	t_sha.c	/^void SHA1Final(unsigned char digest[20], SHA1_CTX* context)$/;"	f
SHA1Final	t_sha.h	42;"	d
SHA1Final	t_sha.h	49;"	d
SHA1Final	t_sha.h	55;"	d
SHA1Final	t_sha.h	62;"	d
SHA1Final_gcry	t_sha.c	/^SHA1Final_gcry(unsigned char digest[20], SHA1_CTX * ctx)$/;"	f
SHA1HANDSOFF	NTconfig.h	29;"	d
SHA1HANDSOFF	acconfig.h	21;"	d
SHA1HANDSOFF	config.h	43;"	d
SHA1Init	t_sha.c	/^void SHA1Init(SHA1_CTX* context)$/;"	f
SHA1Init	t_sha.h	40;"	d
SHA1Init	t_sha.h	47;"	d
SHA1Init	t_sha.h	53;"	d
SHA1Init	t_sha.h	60;"	d
SHA1Init_gcry	t_sha.c	/^SHA1Init_gcry(SHA1_CTX * ctx)$/;"	f
SHA1Transform	t_sha.c	/^static void SHA1Transform(uint32 state[5], const unsigned char buffer[64])$/;"	f	file:
SHA1Update	t_sha.c	/^void SHA1Update(SHA1_CTX* context, const unsigned char* data, unsigned int len)$/;"	f
SHA1Update	t_sha.h	41;"	d
SHA1Update	t_sha.h	48;"	d
SHA1Update	t_sha.h	54;"	d
SHA1Update	t_sha.h	61;"	d
SHA1Update_gcry	t_sha.c	/^SHA1Update_gcry(SHA1_CTX * ctx, const unsigned char * data, unsigned int len)$/;"	f
SHA1_CTX	t_sha.h	/^typedef SHA_CTX SHA1_CTX;$/;"	t
SHA1_CTX	t_sha.h	/^typedef SHS_CTX SHA1_CTX;$/;"	t
SHA1_CTX	t_sha.h	/^typedef gcry_md_hd_t SHA1_CTX;$/;"	t
SHA1_CTX	t_sha.h	/^typedef hash_state SHA1_CTX;$/;"	t
SHA1_CTX	t_sha.h	/^} SHA1_CTX;$/;"	t	typeref:struct:__anon2
SHAREDFLAG	Makefile	/^SHAREDFLAG = --shared$/;"	m
SHA_DIGESTSIZE	t_sha.h	12;"	d
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SIZEOF_INT	NTconfig.h	40;"	d
SIZEOF_INT	config.h	50;"	d
SIZEOF_LONG	NTconfig.h	43;"	d
SIZEOF_LONG	config.h	53;"	d
SIZEOF_SHORT	NTconfig.h	46;"	d
SIZEOF_SHORT	config.h	56;"	d
SOURCES	Makefile	/^SOURCES = $(libsrp_a_SOURCES) $(tconf_SOURCES) $(clitest_SOURCES) $(srvtest_SOURCES) $(getpwtest_SOURCES) $(srptest_SOURCES) $(srpbench_SOURCES) $(srp6bench_SOURCES)$/;"	m
SRP	srp.h	/^typedef struct srp_st SRP;$/;"	t	typeref:struct:srp_st
SRP6_client_method	srp6_client.c	/^SRP6_client_method()$/;"	f
SRP6_server_method	srp6_server.c	/^SRP6_server_method()$/;"	f
SRP6a_client_method	srp6_client.c	/^SRP6a_client_method()$/;"	f
SRP6a_server_method	srp6_server.c	/^SRP6a_server_method()$/;"	f
SRP_AUX_H	srp_aux.h	31;"	d
SRP_CLIENT_PARAM_VERIFY_CB	srp.h	/^typedef SRP_RESULT (_CDECL * SRP_CLIENT_PARAM_VERIFY_CB)(SRP * srp, const unsigned char * mod, int modlen, const unsigned char * gen, int genlen);$/;"	t
SRP_DEFAULT_MIN_BITS	srp.h	51;"	d
SRP_ERROR	srp.h	48;"	d
SRP_FLAG_LEFT_PAD	srp.h	163;"	d
SRP_FLAG_MOD_ACCEL	srp.h	162;"	d
SRP_MAGIC_CLIENT	srp.h	158;"	d
SRP_MAGIC_SERVER	srp.h	159;"	d
SRP_METHOD	srp.h	/^} SRP_METHOD;$/;"	t	typeref:struct:srp_meth_st
SRP_OK	srp.h	46;"	d
SRP_RESULT	srp.h	/^typedef int SRP_RESULT;$/;"	t
SRP_RFC2945_client_method	rfc2945_client.c	/^SRP_RFC2945_client_method()$/;"	f
SRP_RFC2945_server_method	rfc2945_server.c	/^SRP_RFC2945_server_method()$/;"	f
SRP_SECRET_BITS_CB	srp.h	/^typedef int (_CDECL * SRP_SECRET_BITS_CB)(int modsize);$/;"	t
SRP_SERVER_LOOKUP	srp.h	/^typedef struct srp_server_lu_st SRP_SERVER_LOOKUP;$/;"	t	typeref:struct:srp_server_lu_st
SRP_SERVER_LOOKUP_METHOD	srp.h	/^} SRP_SERVER_LOOKUP_METHOD;$/;"	t	typeref:struct:srp_s_lu_meth_st
SRP_SERVER_LOOKUP_new	srp.c	/^SRP_SERVER_LOOKUP_new(SRP_SERVER_LOOKUP_METHOD * meth)$/;"	f
SRP_SERVER_system_lookup	srp.c	/^SRP_SERVER_system_lookup()$/;"	f
SRP_SUCCESS	srp.h	47;"	d
SRP_VERSION_MAJOR	srp.h	40;"	d
SRP_VERSION_MINOR	srp.h	41;"	d
SRP_VERSION_PATCHLEVEL	srp.h	42;"	d
SRP_get_modulus_min_bits	srp.c	/^SRP_get_modulus_min_bits()$/;"	f
SRP_get_secret_bits	srp.c	/^SRP_get_secret_bits(int modsize)$/;"	f
SRP_new	srp.c	/^SRP_new(SRP_METHOD * meth)$/;"	f
STDC_HEADERS	NTconfig.h	14;"	d
STDC_HEADERS	config.h	14;"	d
STDPREFIX	nss_defs.h	30;"	d
STDPREFIX	nss_defs.h	33;"	d
STTY	t_defines.h	106;"	d
STTY	t_defines.h	113;"	d
STTY	t_defines.h	119;"	d
TAR	Makefile	/^TAR = gtar$/;"	m
TEMRIO	t_defines.h	115;"	d
TERMIO	t_defines.h	108;"	d
TERMIO	t_defines.h	121;"	d
TIME_WITH_SYS_TIME	config.h	17;"	d
TOMCRYPT	acconfig.h	9;"	d
TOMCRYPT_SHA	t_sha.h	21;"	d
TOMMATH	acconfig.h	11;"	d
T_CLIENT_H	t_client.h	31;"	d
T_DEFINES_H	t_defines.h	31;"	d
T_PWD_H	t_pwd.h	31;"	d
T_SERVER_H	t_server.h	31;"	d
T_SHA_H	t_sha.h	2;"	d
USE_FTIME	t_defines.h	126;"	d
USE_RENAME	t_defines.h	127;"	d
USE_SGTTY	t_defines.h	122;"	d
USE_TERMIO	t_defines.h	116;"	d
USE_TERMIOS	t_defines.h	109;"	d
VERSION	Makefile	/^VERSION = 2.0.0$/;"	m
VERSION	NTconfig.h	37;"	d
VERSION	acconfig.h	29;"	d
VERSION	config.h	98;"	d
_CDECL	cstr.h	25;"	d
_CDECL	cstr.h	33;"	d
_CDECL	cstr.h	42;"	d
_CDECL	cstr.h	44;"	d
_CDECL	t_defines.h	52;"	d
_CDECL	t_defines.h	60;"	d
_CDECL	t_defines.h	69;"	d
_CDECL	t_defines.h	71;"	d
_CONCAT	nss_defs.h	24;"	d
_CSTR_H_	cstr.h	2;"	d
_DLLAPI	cstr.h	24;"	d
_DLLAPI	cstr.h	32;"	d
_DLLAPI	cstr.h	40;"	d
_DLLAPI	t_defines.h	51;"	d
_DLLAPI	t_defines.h	59;"	d
_DLLAPI	t_defines.h	67;"	d
_DLLDECL	cstr.h	19;"	d
_DLLDECL	t_defines.h	46;"	d
_ENSWF	nsswitch.h	59;"	d
_ENSWF	nsswitch.h	61;"	d
_MSVC15DEXPORT	cstr.h	38;"	d
_MSVC15DEXPORT	t_defines.h	65;"	d
_MSVC15EXPORT	cstr.h	22;"	d
_MSVC15EXPORT	cstr.h	30;"	d
_MSVC15EXPORT	t_defines.h	49;"	d
_MSVC15EXPORT	t_defines.h	57;"	d
_MSVC20EXPORT	cstr.h	23;"	d
_MSVC20EXPORT	cstr.h	31;"	d
_MSVC20EXPORT	cstr.h	39;"	d
_MSVC20EXPORT	t_defines.h	50;"	d
_MSVC20EXPORT	t_defines.h	58;"	d
_MSVC20EXPORT	t_defines.h	66;"	d
_SRP_H_	srp.h	30;"	d
_TYPE	cstr.h	26;"	d
_TYPE	cstr.h	34;"	d
_TYPE	cstr.h	46;"	d
_TYPE	srp.c	/^_TYPE( SRP_RESULT )$/;"	f
_TYPE	t_defines.h	53;"	d
_TYPE	t_defines.h	61;"	d
_TYPE	t_defines.h	73;"	d
_T_READ_H_	t_read.h	31;"	d
__NSSWITCH_H__	nsswitch.h	27;"	d
__NYS_CONFIG_H__	nys_config.h	25;"	d
__YPLIB_MISC_H__	yp_misc.h	28;"	d
_endtcent	t_conf.c	/^_endtcent$/;"	f
_endtpent	t_pw.c	/^_endtpent$/;"	f
_gettcent	t_conf.c	/^_gettcent$/;"	f
_gettcid	t_conf.c	/^_gettcid$/;"	f
_gettpent	t_pw.c	/^_gettpent$/;"	f
_gettpnam	t_pw.c	/^_gettpnam$/;"	f
_nsw_opts	nsswitch.c	/^char *_nsw_opts = NULL;$/;"	v
_settcent	t_conf.c	/^_settcent$/;"	f
_settpent	t_pw.c	/^_settpent$/;"	f
_yp_endtcent	yp_tconf.c	/^void _yp_endtcent(void)$/;"	f
_yp_endtpent	yp_tpasswd.c	/^void _yp_endtpent(void)$/;"	f
_yp_gettcent	yp_tconf.c	/^struct t_confent *_yp_gettcent(void)$/;"	f
_yp_gettcid	yp_tconf.c	/^struct t_confent *_yp_gettcid(int id)$/;"	f
_yp_gettpent	yp_tpasswd.c	/^struct t_pwent *_yp_gettpent(void)$/;"	f
_yp_gettpnam	yp_tpasswd.c	/^struct t_passwd *_yp_gettpnam(const char *name)$/;"	f
_yp_settcent	yp_tconf.c	/^void _yp_settcent(void)$/;"	f
_yp_settpent	yp_tpasswd.c	/^void _yp_settpent(void)$/;"	f
_yp_strip_names	yp_misc.c	/^char *_yp_strip_names(char *buff)$/;"	f
_yp_xcopy	yp_misc.c	/^char *_yp_xcopy(char **cp, char *str)$/;"	f
_yp_xstrtok	yp_misc.c	/^char *_yp_xstrtok(char *cp, int delim)$/;"	f
_ypopts_getmd	yp_misc.c	/^char *_ypopts_getmd(char *defmap, char *suffix, char **domain)$/;"	f
a	t_client.h	/^  struct t_num a;$/;"	m	struct:t_client	typeref:struct:t_client::t_num
abuf	t_client.h	/^  unsigned char abuf[ALEN], Abuf[MAXPARAMLEN];$/;"	m	struct:t_client
accel	srp.h	/^  BigIntegerModAccel accel;  \/* to accelerate modexp if available *\/$/;"	m	struct:srp_st
alloc	cstr.h	/^  void * (_CDECL * alloc)(size_t n, void * heap);$/;"	m	struct:cstr_alloc_st
allocator	cstr.h	/^  cstr_allocator * allocator;$/;"	m	struct:cstr_st
auth	srp.h	/^  SRP_RESULT (_CDECL * auth)(SRP * srp, const unsigned char * a, int alen);$/;"	m	struct:srp_meth_st
b	t_server.h	/^  struct t_num b;$/;"	m	struct:t_server	typeref:struct:t_server::t_num
b64table	t_conv.c	/^static char b64table[] =$/;"	v	file:
b64table	t_math.c	/^static char b64table[] =$/;"	v	file:
bbuf	t_server.h	/^  unsigned char saltbuf[MAXSALTLEN], bbuf[BLEN], Bbuf[MAXPARAMLEN];$/;"	m	struct:t_server
bctx	srp.h	/^  BigIntegerCtx bctx;	     \/* to cache temporaries if available *\/$/;"	m	struct:srp_st
bench_modexp	srpbench.c	/^bench_modexp(b, e, m)$/;"	f
bigbase	srpbench.c	/^static unsigned char bigbase[] = {$/;"	v	file:
bigexp	srpbench.c	/^static unsigned char bigexp[] = {$/;"	v	file:
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = tconf$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
blk	t_sha.c	81;"	d	file:
blk0	t_sha.c	76;"	d	file:
blk0	t_sha.c	79;"	d	file:
buffer	t_sha.h	/^    unsigned char buffer[64];$/;"	m	struct:__anon2
buffer	t_truerand.c	/^static unsigned buffer;$/;"	v	file:
bufp	t_truerand.c	/^char outbuf[1024], *bufp;$/;"	v
cap	cstr.h	/^  int cap;$/;"	m	struct:cstr_st
cfsetispeed	configure	/^cfsetispeed();$/;"	f
ckhash	rfc2945_client.c	/^  SHA1_CTX ckhash;$/;"	m	struct:client_meth_st	file:
ckhash	rfc2945_server.c	/^  SHA1_CTX ckhash;$/;"	m	struct:server_meth_st	file:
ckhash	srp6_client.c	/^  SHA1_CTX ckhash;$/;"	m	struct:client_meth_st	file:
ckhash	srp6_server.c	/^  SHA1_CTX ckhash;$/;"	m	struct:server_meth_st	file:
ckhash	t_client.h	/^  SHA1_CTX hash, ckhash;$/;"	m	struct:t_client
ckhash	t_server.h	/^  SHA1_CTX oldhash, hash, oldckhash, ckhash;$/;"	m	struct:t_server
client_meth_st	rfc2945_client.c	/^struct client_meth_st {$/;"	s	file:
client_meth_st	srp6_client.c	/^struct client_meth_st {$/;"	s	file:
clitest_DEPENDENCIES	Makefile	/^clitest_DEPENDENCIES =  libsrp.a$/;"	m
clitest_LDADD	Makefile	/^clitest_LDADD = $(LDADD)$/;"	m
clitest_LDFLAGS	Makefile	/^clitest_LDFLAGS = $/;"	m
clitest_OBJECTS	Makefile	/^clitest_OBJECTS =  clitest.o$/;"	m
clitest_SOURCES	Makefile	/^clitest_SOURCES = clitest.c$/;"	m
close_on_exit	t_pwd.h	/^  char close_on_exit;$/;"	m	struct:t_conf
close_on_exit	t_pwd.h	/^  char close_on_exit;$/;"	m	struct:t_pw
comment	t_pwd.h	/^  char * comment;$/;"	m	struct:t_preconf
composite	tconf.c	/^int  composite = 0;$/;"	v
confinit	t_conf.c	/^confinit()$/;"	f	file:
count	t_sha.h	/^    uint32 count[2];$/;"	m	struct:__anon2
count	t_truerand.c	/^static unsigned volatile count$/;"	v	file:
count	t_truerand.c	/^volatile unsigned long count, ocount, randbuf;$/;"	v
counter	t_truerand.c	/^static void counter() {$/;"	f	file:
crpool	t_misc.c	/^static unsigned char crpool[64];$/;"	v	file:
cstr	cstr.h	/^} cstr;$/;"	t	typeref:struct:cstr_st
cstr_alloc	cstr.c	/^cstr_alloc(cstr * str, int len)$/;"	f	file:
cstr_alloc_st	cstr.h	/^typedef struct cstr_alloc_st {$/;"	s
cstr_allocator	cstr.h	/^} cstr_allocator;$/;"	t	typeref:struct:cstr_alloc_st
cstr_append	cstr.c	/^cstr_append(cstr * str, const char * s)$/;"	f
cstr_append_str	cstr.c	/^cstr_append_str(cstr * dst, const cstr * src)$/;"	f
cstr_appendn	cstr.c	/^cstr_appendn(cstr * str, const char * s, int len)$/;"	f
cstr_clear_free	cstr.c	/^cstr_clear_free(cstr * str)$/;"	f
cstr_copy	cstr.c	/^cstr_copy(cstr * dst, const cstr * src)$/;"	f
cstr_create	cstr.c	/^cstr_create(const char * s)$/;"	f
cstr_createn	cstr.c	/^cstr_createn(const char * s, int len)$/;"	f
cstr_dup	cstr.c	/^cstr_dup(const cstr * str)$/;"	f
cstr_dup_alloc	cstr.c	/^cstr_dup_alloc(const cstr * str, cstr_allocator * alloc)$/;"	f
cstr_empty	cstr.c	/^cstr_empty(cstr * str)$/;"	f
cstr_empty_string	cstr.c	/^static char cstr_empty_string[] = { '\\0' };$/;"	v	file:
cstr_free	cstr.c	/^cstr_free(cstr * str)$/;"	f
cstr_new	cstr.c	/^cstr_new()$/;"	f
cstr_new_alloc	cstr.c	/^cstr_new_alloc(cstr_allocator * alloc)$/;"	f
cstr_set	cstr.c	/^cstr_set(cstr * str, const char * s)$/;"	f
cstr_set_allocator	cstr.c	/^cstr_set_allocator(cstr_allocator * alloc)$/;"	f
cstr_set_length	cstr.c	/^cstr_set_length(cstr * str, int len)$/;"	f
cstr_setn	cstr.c	/^cstr_setn(cstr * str, const char * s, int len)$/;"	f
cstr_st	cstr.h	/^typedef struct cstr_st {$/;"	s
cstr_use	cstr.c	/^cstr_use(cstr * str)$/;"	f
data	cstr.h	/^  char * data;	\/* Okay to access data and length fields directly *\/$/;"	m	struct:cstr_st
data	srp.h	/^  void * data;$/;"	m	struct:srp_meth_st
data	srp.h	/^  void * data;$/;"	m	struct:srp_server_lu_st
data	t_pwd.h	/^  unsigned char * data;$/;"	m	struct:t_num
datadir	Makefile	/^datadir = ${prefix}\/share$/;"	m
dc_install_base	Makefile	/^	dc_install_base=`cd $(distdir)\/=inst && pwd`; \\$/;"	m
debug	tconf.c	/^int  debug   = 0;$/;"	v
default_alloc	cstr.c	/^static cstr_allocator * default_alloc = NULL;$/;"	v	file:
default_engine	t_math.c	/^static ENGINE * default_engine = NULL;$/;"	v	file:
default_modexp	t_math.c	/^static modexp_meth default_modexp = NULL;$/;"	v	file:
default_secret_bits_cb	srp.c	/^default_secret_bits_cb(int modsize)$/;"	f	file:
defdomain	yp_misc.c	/^static char *defdomain = NULL;$/;"	v	file:
devrand	t_misc.c	/^  unsigned char devrand[20];$/;"	m	struct:__anon1	file:
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
dlopen	configure	/^dlopen()$/;"	f
do_srp6	srp6bench.c	/^do_srp6(struct t_confent * pce, struct t_pwent * ppwe,$/;"	f
do_srp6param	srp6bench.c	/^do_srp6param(struct t_confent * pce, int iterations)$/;"	f
do_srp6preparam	srp6bench.c	/^do_srp6preparam(int pindex, int iterations)$/;"	f
do_test_pindex	srptest.c	/^do_test_pindex(int pindex)$/;"	f
done	t_truerand.c	/^  , done = 0$/;"	v	file:
dontstop	t_truerand.c	/^volatile int dontstop;$/;"	v
endnswent	nsswitch.c	/^void endnswent(void)$/;"	f
entropy	t_misc.c	/^static unsigned char entropy[32];$/;"	v	file:
env	t_truerand.c	/^static jmp_buf env;$/;"	v	file:
envh	t_misc.c	/^  unsigned char envh[SHA_DIGESTSIZE];$/;"	m	struct:__anon1	file:
ex_data	srp.h	/^  cstr * ex_data;$/;"	m	struct:srp_st
ex_data	t_client.h	/^  cstr * ex_data;$/;"	m	struct:t_client
ex_data	t_server.h	/^  cstr * ex_data;$/;"	m	struct:t_server
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
finish	srp.h	/^  SRP_RESULT (_CDECL * finish)(SRP * srp);$/;"	m	struct:srp_meth_st
finish	srp.h	/^  SRP_RESULT (_CDECL * finish)(SRP_SERVER_LOOKUP * slu);$/;"	m	struct:srp_s_lu_meth_st
flags	srp.h	/^  int flags;$/;"	m	struct:srp_st
free	cstr.h	/^  void (_CDECL * free)(void * p, void * heap);$/;"	m	struct:cstr_alloc_st
fsh	t_misc.c	/^  unsigned char fsh[SHA_DIGESTSIZE];$/;"	m	struct:__anon1	file:
fstate	t_pwd.h	/^typedef enum fstate {$/;"	g
g	t_client.h	/^  struct t_num g;$/;"	m	struct:t_client	typeref:struct:t_client::t_num
g	t_server.h	/^  struct t_num g;$/;"	m	struct:t_server	typeref:struct:t_server::t_num
g_rng	t_misc.c	/^static prng_state g_rng;$/;"	v	file:
gbuf	t_client.h	/^  unsigned char nbuf[MAXPARAMLEN], gbuf[MAXPARAMLEN], sbuf[MAXSALTLEN];$/;"	m	struct:t_client
gbuf	t_server.h	/^  unsigned char nbuf[MAXPARAMLEN], gbuf[MAXPARAMLEN], vbuf[MAXPARAMLEN];$/;"	m	struct:t_server
gen_b64	t_pwd.h	/^  char * gen_b64;$/;"	m	struct:t_preconf
genbuf	t_conf.c	/^  cstr * genbuf;$/;"	m	struct:pre_struct	file:
genbuf	t_pwd.h	/^  cstr * genbuf;$/;"	m	struct:t_conf
generator	srp.h	/^  BigInteger generator;$/;"	m	struct:srp_st
generator	t_pwd.h	/^  struct t_num generator;$/;"	m	struct:t_confent	typeref:struct:t_confent::t_num
generator	t_pwd.h	/^  struct t_num generator;$/;"	m	struct:t_preconf	typeref:struct:t_preconf::t_num
genpub	srp.h	/^  SRP_RESULT (_CDECL * genpub)(SRP * srp, cstr ** result);$/;"	m	struct:srp_meth_st
gethostbyname	configure	/^gethostbyname()$/;"	f
getnswbyname	nsswitch.c	/^struct nsw *getnswbyname(char *name)$/;"	f
getnswent	nsswitch.c	/^struct nsw *getnswent(void)$/;"	f
getpwtest_DEPENDENCIES	Makefile	/^getpwtest_DEPENDENCIES =  libsrp.a$/;"	m
getpwtest_LDADD	Makefile	/^getpwtest_LDADD = $(LDADD)$/;"	m
getpwtest_LDFLAGS	Makefile	/^getpwtest_LDFLAGS = $/;"	m
getpwtest_OBJECTS	Makefile	/^getpwtest_OBJECTS =  getpwtest.o$/;"	m
getpwtest_SOURCES	Makefile	/^getpwtest_SOURCES = getpwtest.c$/;"	m
hash	rfc2945_client.c	/^  SHA1_CTX hash;$/;"	m	struct:client_meth_st	file:
hash	rfc2945_server.c	/^  SHA1_CTX hash;$/;"	m	struct:server_meth_st	file:
hash	srp6_client.c	/^  SHA1_CTX hash;$/;"	m	struct:client_meth_st	file:
hash	srp6_server.c	/^  SHA1_CTX hash;$/;"	m	struct:server_meth_st	file:
hash	t_client.h	/^  SHA1_CTX hash, ckhash;$/;"	m	struct:t_client
hash	t_server.h	/^  SHA1_CTX oldhash, hash, oldckhash, ckhash;$/;"	m	struct:t_server
heap	cstr.h	/^  void * heap;$/;"	m	struct:cstr_alloc_st
hexDigitToInt	t_conv.c	/^hexDigitToInt(c)$/;"	f	file:
include_HEADERS	Makefile	/^include_HEADERS = srp.h srp_aux.h t_client.h t_pwd.h t_server.h t_sha.h cstr.h$/;"	m
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
index	t_pwd.h	/^  int index;$/;"	m	struct:t_confent
index	t_pwd.h	/^  int index;$/;"	m	struct:t_pwent
infodir	Makefile	/^infodir = ${prefix}\/info$/;"	m
init	srp.h	/^  SRP_RESULT (_CDECL * init)(SRP * srp);$/;"	m	struct:srp_meth_st
init	srp.h	/^  SRP_RESULT (_CDECL * init)(SRP_SERVER_LOOKUP * slu);$/;"	m	struct:srp_s_lu_meth_st
initialized	t_misc.c	/^static char initialized = 0;$/;"	v	file:
instream	t_pwd.h	/^  FILE * instream;$/;"	m	struct:t_conf
instream	t_pwd.h	/^  FILE * instream;$/;"	m	struct:t_pw
interrupt	t_truerand.c	/^interrupt()$/;"	f	file:
k	rfc2945_client.c	/^  unsigned char k[RFC2945_KEY_LEN];$/;"	m	struct:client_meth_st	file:
k	rfc2945_server.c	/^  unsigned char k[RFC2945_KEY_LEN];$/;"	m	struct:server_meth_st	file:
k	srp6_client.c	/^  unsigned char k[RFC2945_KEY_LEN];$/;"	m	struct:client_meth_st	file:
k	srp6_server.c	/^  unsigned char k[RFC2945_KEY_LEN];$/;"	m	struct:server_meth_st	file:
key	srp.h	/^  BigInteger key;$/;"	m	struct:srp_st
key	srp.h	/^  SRP_RESULT (_CDECL * key)(SRP * srp, cstr ** result,$/;"	m	struct:srp_meth_st
len	t_pwd.h	/^  int len;$/;"	m	struct:t_num
length	cstr.h	/^  int length;$/;"	m	struct:cstr_st
lib_LIBRARIES	Makefile	/^lib_LIBRARIES = libsrp.a$/;"	m
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
library_initialized	srp.c	/^static int library_initialized = 0;$/;"	v	file:
libsrp_a_LIBADD	Makefile	/^libsrp_a_LIBADD = $/;"	m
libsrp_a_OBJECTS	Makefile	/^libsrp_a_OBJECTS =  t_client.o t_conf.o t_conv.o t_getpass.o t_sha.o \\$/;"	m
libsrp_a_SOURCES	Makefile	/^libsrp_a_SOURCES =    t_client.c t_conf.c t_conv.c t_getpass.c t_sha.c t_math.c t_misc.c   t_pw.c t_read.c t_server.c t_truerand.c cstr.c   srp.c rfc2945_client.c rfc2945_server.c srp6_client.c srp6_server.c   yp_misc.c yp_tpasswd.c yp_tconf.c nsw_tpasswd.c nsw_tconf.c nsswitch.c$/;"	m
list	Makefile	/^	list='$(bin_PROGRAMS)'; for p in $$list; do \\$/;"	m
list	Makefile	/^	list='$(include_HEADERS)'; for p in $$list; do \\$/;"	m
list	Makefile	/^	list='$(lib_LIBRARIES)'; for p in $$list; do \\$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lookup	srp.h	/^  SRP_RESULT (_CDECL * lookup)(SRP_SERVER_LOOKUP * slu, SRP * srp, cstr * username);$/;"	m	struct:srp_s_lu_meth_st
magic	srp.h	/^  int magic;	\/* To distinguish client from server (and for sanity) *\/$/;"	m	struct:srp_st
main	clitest.c	/^main()$/;"	f
main	getpwtest.c	/^main(argc, argv)$/;"	f
main	srp6bench.c	/^main(argc, argv)$/;"	f
main	srpbench.c	/^main(argc, argv)$/;"	f
main	srptest.c	/^main(argc, argv)$/;"	f
main	srvtest.c	/^main(argc, argv)$/;"	f
main	tconf.c	/^int main(argc, argv)$/;"	f
malloc_allocator	cstr.c	/^static cstr_allocator malloc_allocator = { Cmalloc, Cfree, NULL };$/;"	v	file:
malloc_allocator	cstr.c	/^static cstr_allocator malloc_allocator = { malloc, free, NULL };$/;"	v	file:
mandir	Makefile	/^mandir = ${prefix}\/man$/;"	m
memcpy	t_defines.h	87;"	d
meth	srp.h	/^  SRP_METHOD * meth;$/;"	m	struct:srp_st
meth	srp.h	/^  SRP_SERVER_LOOKUP_METHOD * meth;$/;"	m	struct:srp_server_lu_st
meth_data	srp.h	/^  void * meth_data;$/;"	m	struct:srp_s_lu_meth_st
meth_data	srp.h	/^  void * meth_data;$/;"	m	struct:srp_st
mkinstalldirs	Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/mkinstalldirs$/;"	m
mod_b64	t_pwd.h	/^  char * mod_b64;$/;"	m	struct:t_preconf
modbuf	t_conf.c	/^  cstr * modbuf;$/;"	m	struct:pre_struct	file:
modbuf	t_pwd.h	/^  cstr * modbuf;$/;"	m	struct:t_conf
modexp_meth	t_math.c	/^typedef int (*modexp_meth)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,$/;"	t	file:
modulus	srp.h	/^  BigInteger modulus;$/;"	m	struct:srp_st
modulus	srpbench.c	/^static unsigned char modulus[] = {$/;"	v	file:
modulus	t_pwd.h	/^  struct t_num modulus;$/;"	m	struct:t_confent	typeref:struct:t_confent::t_num
modulus	t_pwd.h	/^  struct t_num modulus;$/;"	m	struct:t_preconf	typeref:struct:t_preconf::t_num
n	t_client.h	/^  struct t_num n;$/;"	m	struct:t_client	typeref:struct:t_client::t_num
n	t_server.h	/^  struct t_num n;$/;"	m	struct:t_server	typeref:struct:t_server::t_num
name	nsswitch.h	/^  char name[33];$/;"	m	struct:nsw
name	srp.h	/^  const char * name;$/;"	m	struct:srp_meth_st
name	srp.h	/^  const char * name;$/;"	m	struct:srp_s_lu_meth_st
name	t_pwd.h	/^  char * name;$/;"	m	struct:t_pwent
nbuf	t_client.h	/^  unsigned char nbuf[MAXPARAMLEN], gbuf[MAXPARAMLEN], sbuf[MAXSALTLEN];$/;"	m	struct:t_client
nbuf	t_server.h	/^  unsigned char nbuf[MAXPARAMLEN], gbuf[MAXPARAMLEN], vbuf[MAXPARAMLEN];$/;"	m	struct:t_server
noinst_HEADERS	Makefile	/^noinst_HEADERS = t_defines.h t_read.h nys_config.h yp_misc.h endXXent.h getXXent.h setXXent.h getXXbyYY.h nss_defs.h nsswitch.h$/;"	m
noinst_PROGRAMS	Makefile	/^noinst_PROGRAMS = clitest srvtest getpwtest srptest srpbench srp6bench$/;"	m
nsw	nsswitch.h	/^struct nsw$/;"	s
nsw_loadcache	nsswitch.c	/^static int nsw_loadcache(void)$/;"	f	file:
nsw_type	nsswitch.h	/^enum nsw_type$/;"	g
nswcache	nsswitch.c	/^static struct nsw *nswcache = NULL;$/;"	v	typeref:struct:nsw	file:
nswcache_cnt	nsswitch.c	/^static int nswcache_cnt  = 0;$/;"	v	file:
nswcache_size	nsswitch.c	/^static int nswcache_size = 0;$/;"	v	file:
nswfp	nsswitch.c	/^static FILE *nswfp = NULL;$/;"	v	file:
nswp	nsw_tconf.c	/^static struct nsw *nswp = NULL;$/;"	v	typeref:struct:nsw	file:
nswp	nsw_tpasswd.c	/^static struct nsw *nswp = NULL;$/;"	v	typeref:struct:nsw	file:
ocount	t_truerand.c	/^static unsigned ocount;$/;"	v	file:
ocount	t_truerand.c	/^volatile unsigned long count, ocount, randbuf;$/;"	v
oldckhash	rfc2945_server.c	/^  SHA1_CTX oldckhash;$/;"	m	struct:server_meth_st	file:
oldckhash	srp6_server.c	/^  SHA1_CTX oldckhash;$/;"	m	struct:server_meth_st	file:
oldckhash	t_server.h	/^  SHA1_CTX oldhash, hash, oldckhash, ckhash;$/;"	m	struct:t_server
oldhash	rfc2945_server.c	/^  SHA1_CTX oldhash;$/;"	m	struct:server_meth_st	file:
oldhash	srp6_server.c	/^  SHA1_CTX oldhash;$/;"	m	struct:server_meth_st	file:
oldhash	t_server.h	/^  SHA1_CTX oldhash, hash, oldckhash, ckhash;$/;"	m	struct:t_server
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
orderc	nsswitch.h	/^  int orderc;$/;"	m	struct:nsw
orderl	nsswitch.h	/^  enum nsw_type orderl[NSW_MAXORDER];$/;"	m	struct:nsw	typeref:enum:nsw::nsw_type
outbuf	t_truerand.c	/^char outbuf[1024], *bufp;$/;"	v
outpos	t_misc.c	/^static unsigned int outpos = 0;$/;"	v	file:
p	t_client.h	/^  struct t_num p;$/;"	m	struct:t_client	typeref:struct:t_client::t_num
param_cb	srp.h	/^  SRP_CLIENT_PARAM_VERIFY_CB param_cb;	\/* to verify params *\/$/;"	m	struct:srp_st
params	srp.h	/^  SRP_RESULT (_CDECL * params)(SRP * srp,$/;"	m	struct:srp_meth_st
passwd	srp.h	/^  SRP_RESULT (_CDECL * passwd)(SRP * srp,$/;"	m	struct:srp_meth_st
password	srp.h	/^  BigInteger password;$/;"	m	struct:srp_st
password	t_pwd.h	/^  struct t_num password;$/;"	m	struct:t_pwent	typeref:struct:t_pwent::t_num
pbuf	t_client.h	/^  unsigned char pbuf[MAXPARAMLEN], vbuf[MAXPARAMLEN];$/;"	m	struct:t_client
pebuf	t_pwd.h	/^  struct t_pwent pebuf;$/;"	m	struct:t_pw	typeref:struct:t_pw::t_pwent
pid	t_misc.c	/^  short pid;$/;"	m	struct:__anon1	file:
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/libsrp$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/libsrp$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/libsrp$/;"	m
ppid	t_misc.c	/^  short ppid;$/;"	m	struct:__anon1	file:
pre_params	t_conf.c	/^} pre_params[] = {$/;"	v	typeref:struct:pre_struct	file:
pre_struct	t_conf.c	/^static struct pre_struct {$/;"	s	file:
preconf	t_conf.c	/^  struct t_preconf preconf;$/;"	m	struct:pre_struct	typeref:struct:pre_struct::t_preconf	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
preseed	t_misc.c	/^} preseed;$/;"	v	typeref:struct:__anon1	file:
print_num	tconf.c	/^print_num(const unsigned char * data, int sz, int radix, int oneline)$/;"	f
progName	tconf.c	/^char *progName;$/;"	v
pubkey	srp.h	/^  BigInteger pubkey;$/;"	m	struct:srp_st
pwbuf	t_pwd.h	/^  cstr * pwbuf;$/;"	m	struct:t_pw
pwinit	t_pw.c	/^pwinit()$/;"	f	file:
pwsetup	t_pw.c	/^pwsetup(out, tpwd, tcnf)$/;"	f	file:
pwsetup	yp_tpasswd.c	/^pwsetup(out, tpwd, tcnf)$/;"	f	file:
r	rfc2945_server.c	/^  unsigned char r[RFC2945_RESP_LEN];$/;"	m	struct:server_meth_st	file:
r	srp6_server.c	/^  unsigned char r[RFC2945_RESP_LEN];$/;"	m	struct:server_meth_st	file:
randbuf	t_truerand.c	/^volatile unsigned long count, ocount, randbuf;$/;"	v
randcnt	t_misc.c	/^static unsigned long randcnt = 0;$/;"	v	file:
randctxt	t_misc.c	/^SHA1_CTX randctxt;$/;"	v
randout	t_misc.c	/^static unsigned char randpool[SHA_DIGESTSIZE], randout[SHA_DIGESTSIZE];$/;"	v	file:
randpool	t_misc.c	/^static unsigned char randpool[SHA_DIGESTSIZE], randout[SHA_DIGESTSIZE];$/;"	v	file:
raw_n_truerand	t_truerand.c	/^raw_n_truerand(n)$/;"	f
raw_truerand	t_truerand.c	/^raw_truerand() {$/;"	f
raw_truerand	t_truerand.c	/^raw_truerand()$/;"	f
ref	cstr.h	/^  int ref;	\/* Simple reference counter *\/$/;"	m	struct:cstr_st
respond	srp.h	/^  SRP_RESULT (_CDECL * respond)(SRP * srp, cstr ** proof);$/;"	m	struct:srp_meth_st
rewind_flag	yp_tconf.c	/^static int rewind_flag = 1;$/;"	v	file:
rewind_flag	yp_tpasswd.c	/^static int rewind_flag = 1;$/;"	v	file:
rol	t_sha.c	71;"	d	file:
roulette	t_truerand.c	/^roulette()$/;"	f	file:
roulette	t_truerand.c	/^static unsigned long roulette() {$/;"	f	file:
s	t_client.h	/^  struct t_num s;$/;"	m	struct:t_client	typeref:struct:t_client::t_num
s	t_server.h	/^  struct t_num s;$/;"	m	struct:t_server	typeref:struct:t_server::t_num
salt	srp.h	/^  cstr * salt;$/;"	m	struct:srp_st
salt	t_pwd.h	/^  struct t_num salt;$/;"	m	struct:t_pwent	typeref:struct:t_pwent::t_num
saltbuf	t_pwd.h	/^  unsigned char saltbuf[SALTLEN];$/;"	m	struct:t_pw
saltbuf	t_server.h	/^  unsigned char saltbuf[MAXSALTLEN], bbuf[BLEN], Bbuf[MAXPARAMLEN];$/;"	m	struct:t_server
saved_setarg	setXXent.h	/^static SETARGTYPE saved_setarg;$/;"	v
savekey	yp_tconf.c	/^static char *savekey = NULL;$/;"	v	file:
savekey	yp_tpasswd.c	/^static char *savekey = NULL;$/;"	v	file:
savekeylen	yp_tconf.c	/^static int savekeylen = 0;$/;"	v	file:
savekeylen	yp_tpasswd.c	/^static int savekeylen = 0;$/;"	v	file:
savepwent	t_pw.c	/^savepwent(tpw, pwent)$/;"	f	file:
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbuf	t_client.h	/^  unsigned char nbuf[MAXPARAMLEN], gbuf[MAXPARAMLEN], sbuf[MAXSALTLEN];$/;"	m	struct:t_client
sec	t_misc.c	/^  time_t sec;$/;"	m	struct:__anon1	file:
secret	srp.h	/^  BigInteger secret;$/;"	m	struct:srp_st
server_meth_st	rfc2945_server.c	/^struct server_meth_st {$/;"	s	file:
server_meth_st	srp6_server.c	/^struct server_meth_st {$/;"	s	file:
session_key	t_client.h	/^  unsigned char session_key[SESSION_KEY_LEN];$/;"	m	struct:t_client
session_key	t_server.h	/^  unsigned char session_key[SESSION_KEY_LEN];$/;"	m	struct:t_server
session_response	t_client.h	/^  unsigned char session_response[RESPONSE_LEN];$/;"	m	struct:t_client
session_response	t_server.h	/^  unsigned char session_response[RESPONSE_LEN];$/;"	m	struct:t_server
setflag	nsw_tconf.c	/^static int setflag = 0;$/;"	v	file:
setflag	nsw_tpasswd.c	/^static int setflag = 0;$/;"	v	file:
setnswent	nsswitch.c	/^int setnswent(void)$/;"	f
setptr	nsw_tconf.c	/^static int setptr  = 0;$/;"	v	file:
setptr	nsw_tpasswd.c	/^static int setptr  = 0;$/;"	v	file:
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shsFinalBytes	t_sha.c	/^shsFinalBytes(unsigned char digest[20], SHS_CTX* context)$/;"	f
sieve30	t_conf.c	/^static int sieve30[] =$/;"	v	file:
sig_catch	t_getpass.c	/^sig_catch (sig)$/;"	f	file:
sig_caught	t_getpass.c	/^static	int	sig_caught;$/;"	v	file:
sigact	t_getpass.c	/^static	struct	sigaction sigact;$/;"	v	typeref:struct:sigaction	file:
slu	srp.h	/^  SRP_SERVER_LOOKUP * slu;   \/* to look up users *\/$/;"	m	struct:srp_st
slu_nop	srp.c	/^slu_nop(SRP_SERVER_LOOKUP * slu)$/;"	f	file:
slu_sys_lookup	srp.c	/^slu_sys_lookup(SRP_SERVER_LOOKUP * slu, SRP * srp, cstr * username)$/;"	f	file:
smallbase	srpbench.c	/^static unsigned char smallbase[] = { 2 };$/;"	v	file:
smallexp	srpbench.c	/^static unsigned char smallexp[] = { 0xFD, 0xB9, 0x75, 0x31 };$/;"	v	file:
socket	configure	/^socket()$/;"	f
sophie_germain	t_conf.c	/^sophie_germain(q, lo, hi)$/;"	f	file:
srcdir	Makefile	/^srcdir = .$/;"	m
srp2945_client_auth	rfc2945_client.c	/^srp2945_client_auth(SRP * srp, const unsigned char * a, int alen)$/;"	f	file:
srp2945_client_finish	rfc2945_client.c	/^srp2945_client_finish(SRP * srp)$/;"	f	file:
srp2945_client_genpub	rfc2945_client.c	/^srp2945_client_genpub(SRP * srp, cstr ** result)$/;"	f	file:
srp2945_client_init	rfc2945_client.c	/^srp2945_client_init(SRP * srp)$/;"	f	file:
srp2945_client_key	rfc2945_client.c	/^srp2945_client_key(SRP * srp, cstr ** result,$/;"	f	file:
srp2945_client_params	rfc2945_client.c	/^srp2945_client_params(SRP * srp, const unsigned char * modulus, int modlen,$/;"	f	file:
srp2945_client_passwd	rfc2945_client.c	/^srp2945_client_passwd(SRP * srp, const unsigned char * p, int plen)$/;"	f	file:
srp2945_client_respond	rfc2945_client.c	/^srp2945_client_respond(SRP * srp, cstr ** proof)$/;"	f	file:
srp2945_client_verify	rfc2945_client.c	/^srp2945_client_verify(SRP * srp, const unsigned char * proof, int prooflen)$/;"	f	file:
srp2945_server_auth	rfc2945_server.c	/^srp2945_server_auth(SRP * srp, const unsigned char * a, int alen)$/;"	f	file:
srp2945_server_finish	rfc2945_server.c	/^srp2945_server_finish(SRP * srp)$/;"	f	file:
srp2945_server_genpub	rfc2945_server.c	/^srp2945_server_genpub(SRP * srp, cstr ** result)$/;"	f	file:
srp2945_server_init	rfc2945_server.c	/^srp2945_server_init(SRP * srp)$/;"	f	file:
srp2945_server_key	rfc2945_server.c	/^srp2945_server_key(SRP * srp, cstr ** result,$/;"	f	file:
srp2945_server_params	rfc2945_server.c	/^srp2945_server_params(SRP * srp, const unsigned char * modulus, int modlen,$/;"	f	file:
srp2945_server_passwd	rfc2945_server.c	/^srp2945_server_passwd(SRP * srp, const unsigned char * p, int plen)$/;"	f	file:
srp2945_server_respond	rfc2945_server.c	/^srp2945_server_respond(SRP * srp, cstr ** proof)$/;"	f	file:
srp2945_server_verify	rfc2945_server.c	/^srp2945_server_verify(SRP * srp, const unsigned char * proof, int prooflen)$/;"	f	file:
srp6_client_auth	srp6_client.c	/^srp6_client_auth(SRP * srp, const unsigned char * a, int alen)$/;"	f	file:
srp6_client_finish	srp6_client.c	/^srp6_client_finish(SRP * srp)$/;"	f	file:
srp6_client_genpub	srp6_client.c	/^srp6_client_genpub(SRP * srp, cstr ** result)$/;"	f	file:
srp6_client_init	srp6_client.c	/^srp6_client_init(SRP * srp)$/;"	f	file:
srp6_client_key	srp6_client.c	/^srp6_client_key(SRP * srp, cstr ** result,$/;"	f	file:
srp6_client_key_ex	srp6_client.c	/^srp6_client_key_ex(SRP * srp, cstr ** result,$/;"	f	file:
srp6_client_meth	srp6_client.c	/^static SRP_METHOD srp6_client_meth = {$/;"	v	file:
srp6_client_params	srp6_client.c	/^srp6_client_params(SRP * srp, const unsigned char * modulus, int modlen,$/;"	f	file:
srp6_client_passwd	srp6_client.c	/^srp6_client_passwd(SRP * srp, const unsigned char * p, int plen)$/;"	f	file:
srp6_client_respond	srp6_client.c	/^srp6_client_respond(SRP * srp, cstr ** proof)$/;"	f	file:
srp6_client_verify	srp6_client.c	/^srp6_client_verify(SRP * srp, const unsigned char * proof, int prooflen)$/;"	f	file:
srp6_server_auth	srp6_server.c	/^srp6_server_auth(SRP * srp, const unsigned char * a, int alen)$/;"	f	file:
srp6_server_finish	srp6_server.c	/^srp6_server_finish(SRP * srp)$/;"	f	file:
srp6_server_genpub	srp6_server.c	/^srp6_server_genpub(SRP * srp, cstr ** result)$/;"	f	file:
srp6_server_genpub_ex	srp6_server.c	/^srp6_server_genpub_ex(SRP * srp, cstr ** result, BigInteger k)$/;"	f	file:
srp6_server_init	srp6_server.c	/^srp6_server_init(SRP * srp)$/;"	f	file:
srp6_server_key	srp6_server.c	/^srp6_server_key(SRP * srp, cstr ** result,$/;"	f	file:
srp6_server_meth	srp6_server.c	/^static SRP_METHOD srp6_server_meth = {$/;"	v	file:
srp6_server_params	srp6_server.c	/^srp6_server_params(SRP * srp, const unsigned char * modulus, int modlen,$/;"	f	file:
srp6_server_passwd	srp6_server.c	/^srp6_server_passwd(SRP * srp, const unsigned char * p, int plen)$/;"	f	file:
srp6_server_respond	srp6_server.c	/^srp6_server_respond(SRP * srp, cstr ** proof)$/;"	f	file:
srp6_server_verify	srp6_server.c	/^srp6_server_verify(SRP * srp, const unsigned char * proof, int prooflen)$/;"	f	file:
srp6a_client_init	srp6_client.c	/^srp6a_client_init(SRP * srp)$/;"	f	file:
srp6a_client_key	srp6_client.c	/^srp6a_client_key(SRP * srp, cstr ** result,$/;"	f	file:
srp6a_client_meth	srp6_client.c	/^static SRP_METHOD srp6a_client_meth = {$/;"	v	file:
srp6a_server_genpub	srp6_server.c	/^srp6a_server_genpub(SRP * srp, cstr ** result)$/;"	f	file:
srp6a_server_init	srp6_server.c	/^srp6a_server_init(SRP * srp)$/;"	f	file:
srp6a_server_meth	srp6_server.c	/^static SRP_METHOD srp6a_server_meth = {$/;"	v	file:
srp6bench_DEPENDENCIES	Makefile	/^srp6bench_DEPENDENCIES =  libsrp.a$/;"	m
srp6bench_LDADD	Makefile	/^srp6bench_LDADD = $(LDADD)$/;"	m
srp6bench_LDFLAGS	Makefile	/^srp6bench_LDFLAGS = $/;"	m
srp6bench_OBJECTS	Makefile	/^srp6bench_OBJECTS =  srp6bench.o$/;"	m
srp6bench_SOURCES	Makefile	/^srp6bench_SOURCES = srp6bench.c$/;"	m
srp_meth_st	srp.h	/^typedef struct srp_meth_st {$/;"	s
srp_modulus_min_bits	srp.c	/^static int srp_modulus_min_bits = SRP_DEFAULT_MIN_BITS;$/;"	v	file:
srp_rfc2945_client_meth	rfc2945_client.c	/^static SRP_METHOD srp_rfc2945_client_meth = {$/;"	v	file:
srp_rfc2945_server_meth	rfc2945_server.c	/^static SRP_METHOD srp_rfc2945_server_meth = {$/;"	v	file:
srp_s_lu_meth_st	srp.h	/^typedef struct srp_s_lu_meth_st {$/;"	s
srp_s_lu_sys_meth	srp.c	/^static struct srp_s_lu_meth_st srp_s_lu_sys_meth = {$/;"	v	typeref:struct:srp_s_lu_meth_st	file:
srp_s_sys_lookup	srp.c	/^static struct srp_server_lu_st srp_s_sys_lookup = {$/;"	v	typeref:struct:srp_server_lu_st	file:
srp_sb_cb	srp.c	/^static SRP_SECRET_BITS_CB srp_sb_cb = default_secret_bits_cb;$/;"	v	file:
srp_server_lu_st	srp.h	/^struct srp_server_lu_st {$/;"	s
srp_st	srp.h	/^struct srp_st {$/;"	s
srpbench_DEPENDENCIES	Makefile	/^srpbench_DEPENDENCIES =  libsrp.a$/;"	m
srpbench_LDADD	Makefile	/^srpbench_LDADD = $(LDADD)$/;"	m
srpbench_LDFLAGS	Makefile	/^srpbench_LDFLAGS = $/;"	m
srpbench_OBJECTS	Makefile	/^srpbench_OBJECTS =  srpbench.o$/;"	m
srpbench_SOURCES	Makefile	/^srpbench_SOURCES = srpbench.c$/;"	m
srptest_DEPENDENCIES	Makefile	/^srptest_DEPENDENCIES =  libsrp.a$/;"	m
srptest_LDADD	Makefile	/^srptest_LDADD = $(LDADD)$/;"	m
srptest_LDFLAGS	Makefile	/^srptest_LDFLAGS = $/;"	m
srptest_OBJECTS	Makefile	/^srptest_OBJECTS =  srptest.o$/;"	m
srptest_SOURCES	Makefile	/^srptest_SOURCES = srptest.c$/;"	m
srvtest_DEPENDENCIES	Makefile	/^srvtest_DEPENDENCIES =  libsrp.a$/;"	m
srvtest_LDADD	Makefile	/^srvtest_LDADD = $(LDADD)$/;"	m
srvtest_LDFLAGS	Makefile	/^srvtest_LDFLAGS = $/;"	m
srvtest_OBJECTS	Makefile	/^srvtest_OBJECTS =  srvtest.o$/;"	m
srvtest_SOURCES	Makefile	/^srvtest_SOURCES = srvtest.c$/;"	m
state	t_conf.c	/^  int state;	\/* 0 == uninitialized\/first time *\/$/;"	m	struct:pre_struct	file:
state	t_pwd.h	/^  FILE_STATE state;$/;"	m	struct:t_pw
state	t_sha.h	/^    uint32 state[5];$/;"	m	struct:__anon2
strchr	t_defines.h	82;"	d
strrchr	t_defines.h	83;"	d
subsec	t_misc.c	/^  time_t subsec;$/;"	m	struct:__anon1	file:
sysconf	t_conf.c	/^static struct t_conf * sysconf = NULL;$/;"	v	typeref:struct:t_conf	file:
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
syspw	t_pw.c	/^static struct t_pw * syspw = NULL;$/;"	v	typeref:struct:t_pw	file:
t_changepw	t_pw.c	/^t_changepw(pwname, diff)$/;"	f
t_client	t_client.h	/^struct t_client {$/;"	s
t_clientaddexdata	t_client.c	/^t_clientaddexdata(tc, data, len)$/;"	f
t_clientclose	t_client.c	/^t_clientclose(tc)$/;"	f
t_clientgenexp	t_client.c	/^t_clientgenexp(tc)$/;"	f
t_clientgetkey	t_client.c	/^t_clientgetkey(tc, serverval)$/;"	f
t_clientopen	t_client.c	/^t_clientopen(u, n, g, s)$/;"	f
t_clientpasswd	t_client.c	/^t_clientpasswd(tc, password)$/;"	f
t_clientresponse	t_client.c	/^t_clientresponse(tc)$/;"	f
t_clientverify	t_client.c	/^t_clientverify(tc, resp)$/;"	f
t_closeconf	t_conf.c	/^t_closeconf(tc)$/;"	f
t_closepw	t_pw.c	/^t_closepw(tpw)$/;"	f
t_cmpconfent	t_conf.c	/^t_cmpconfent(cf1, cf2)$/;"	f
t_conf	t_pwd.h	/^struct t_conf {		\/* An open configuration file *\/$/;"	s
t_confent	t_pwd.h	/^struct t_confent {	\/* One configuration file entry (index, N, g) *\/$/;"	s
t_cstrfromb64	t_conv.c	/^t_cstrfromb64(dst, src)$/;"	f
t_deletepw	t_pw.c	/^t_deletepw(pwname, user)$/;"	f
t_envhash	t_misc.c	/^t_envhash(out)$/;"	f	file:
t_fromb64	t_conv.c	/^t_fromb64(dst, src)$/;"	f
t_fromhex	t_conv.c	/^t_fromhex(dst, src)$/;"	f
t_fshash	t_misc.c	/^t_fshash(out)$/;"	f	file:
t_getconfbyindex	t_conf.c	/^t_getconfbyindex(tc, index)$/;"	f
t_getconfent	t_conf.c	/^t_getconfent(tc)$/;"	f
t_getconflast	t_conf.c	/^t_getconflast(tc)$/;"	f
t_getpass	t_getpass.c	/^t_getpass (buf, maxlen, prompt)$/;"	f
t_getprecount	t_conf.c	/^t_getprecount()$/;"	f
t_getpreparam	t_conf.c	/^t_getpreparam(idx)$/;"	f
t_getpwbyname	t_pw.c	/^t_getpwbyname(tpw, user)$/;"	f
t_getpwent	t_pw.c	/^t_getpwent(tpw)$/;"	f
t_initrand	t_misc.c	/^t_initrand()$/;"	f	file:
t_isprime	t_conf.c	/^t_isprime(x)$/;"	f
t_makeconfent	t_conf.c	/^t_makeconfent(tc, nsize)$/;"	f
t_makeconfent_c	t_conf.c	/^t_makeconfent_c(tc, nsize)$/;"	f
t_makepwent	t_pw.c	/^t_makepwent(tpw, user, pass, salt, confent)$/;"	f
t_mgf1	t_misc.c	/^t_mgf1(mask, masklen, seed, seedlen)$/;"	f
t_newconfent	t_conf.c	/^t_newconfent(tc)$/;"	f
t_newpw	t_pw.c	/^t_newpw()$/;"	f
t_nextcstrfield	t_read.c	/^t_nextcstrfield(fp, s)$/;"	f
t_nextfield	t_read.c	/^t_nextfield(fp, s, max)$/;"	f
t_nextline	t_read.c	/^t_nextline(fp)$/;"	f
t_num	t_pwd.h	/^struct t_num {	\/* Standard byte-oriented integer representation *\/$/;"	s
t_openconf	t_conf.c	/^t_openconf(fp)$/;"	f
t_openconfbyname	t_conf.c	/^t_openconfbyname(confname)$/;"	f
t_openpw	t_pw.c	/^t_openpw(fp)$/;"	f
t_openpwbyname	t_pw.c	/^t_openpwbyname(pwname)$/;"	f
t_passwd	t_pwd.h	/^struct t_passwd {$/;"	s
t_preconf	t_pwd.h	/^struct t_preconf {	\/* Structure returned by t_getpreparam() *\/$/;"	s
t_putconfent	t_conf.c	/^t_putconfent(ent, fp)$/;"	f
t_putpwent	t_pw.c	/^t_putpwent(ent, fp)$/;"	f
t_pw	t_pwd.h	/^struct t_pw {		\/* An open password file *\/$/;"	s
t_pwcopy	t_pw.c	/^t_pwcopy(pwdest, pwsrc, diff)$/;"	f	file:
t_pwent	t_pwd.h	/^struct t_pwent {	\/* A single password file entry *\/$/;"	s
t_pwremove	t_pw.c	/^t_pwremove(pwdest, pwsrc, user)$/;"	f	file:
t_random	t_misc.c	/^t_random(data, size)$/;"	f
t_rewindconf	t_conf.c	/^t_rewindconf(tc)$/;"	f
t_rewindpw	t_pw.c	/^t_rewindpw(tpw)$/;"	f
t_server	t_server.h	/^struct t_server {$/;"	s
t_serveraddexdata	t_server.c	/^t_serveraddexdata(ts, data, len)$/;"	f
t_serverclose	t_server.c	/^t_serverclose(ts)$/;"	f
t_servergenexp	t_server.c	/^t_servergenexp(ts)$/;"	f
t_servergetkey	t_server.c	/^t_servergetkey(ts, clientval)$/;"	f
t_serveropen	t_server.c	/^t_serveropen(username)$/;"	f
t_serveropenfromfiles	t_server.c	/^t_serveropenfromfiles(username, pwfile, cfile)$/;"	f
t_serveropenraw	t_server.c	/^t_serveropenraw(ent, tce)$/;"	f
t_serverresponse	t_server.c	/^t_serverresponse(ts)$/;"	f
t_serververify	t_server.c	/^t_serververify(ts, resp)$/;"	f
t_sessionkey	t_misc.c	/^t_sessionkey(key, sk, sklen)$/;"	f
t_stronginitrand	t_misc.c	/^t_stronginitrand()$/;"	f
t_tob64	t_conv.c	/^t_tob64(dst, src, size)$/;"	f
t_tob64cstr	t_conv.c	/^t_tob64cstr(dst, src, sz)$/;"	f
t_tohex	t_conv.c	/^t_tohex(dst, src, size)$/;"	f
t_tohexcstr	t_conv.c	/^t_tohexcstr(dst, src, size)$/;"	f
t_verifypw	t_pw.c	/^t_verifypw(user, pass)$/;"	f
tc	t_pwd.h	/^  struct t_confent tc;$/;"	m	struct:t_passwd	typeref:struct:t_passwd::t_confent
tcbuf	t_pwd.h	/^  struct t_confent tcbuf;$/;"	m	struct:t_conf	typeref:struct:t_conf::t_confent
tcent_parse	yp_tconf.c	/^static struct t_confent *tcent_parse(char *str, int len)$/;"	f	file:
tconf_DEPENDENCIES	Makefile	/^tconf_DEPENDENCIES =  libsrp.a$/;"	m
tconf_LDADD	Makefile	/^tconf_LDADD = $(LDADD)$/;"	m
tconf_LDFLAGS	Makefile	/^tconf_LDFLAGS = $/;"	m
tconf_OBJECTS	Makefile	/^tconf_OBJECTS =  tconf.o$/;"	m
tconf_SOURCES	Makefile	/^tconf_SOURCES = tconf.c$/;"	m
testbase	srpbench.c	/^static unsigned char testbase[] = { 0x80, 0x00 };$/;"	v	file:
testexp	srpbench.c	/^static unsigned char testexp[] = { 0x31, 0x41, 0x59 };$/;"	v	file:
testmod	srpbench.c	/^static unsigned char testmod[] =$/;"	v	file:
tick	t_truerand.c	/^tick()$/;"	f	file:
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
tp	t_pwd.h	/^  struct t_pwent tp;$/;"	m	struct:t_passwd	typeref:struct:t_passwd::t_pwent
tpass	t_pw.c	/^static struct t_passwd tpass;$/;"	v	typeref:struct:t_passwd	file:
tpass	yp_tpasswd.c	/^static struct t_passwd tpass;$/;"	v	typeref:struct:t_passwd	file:
tpent_parse	yp_tpasswd.c	/^static struct t_pwent *tpent_parse(char *str, int len)$/;"	f	file:
trand1	t_misc.c	/^  unsigned int trand1;$/;"	m	struct:__anon1	file:
trand2	t_misc.c	/^  unsigned int trand2;$/;"	m	struct:__anon1	file:
transform	Makefile	/^transform = s,x,x,$/;"	m
trialdiv	t_conf.c	/^trialdiv(x)$/;"	f	file:
u	srp.h	/^  BigInteger u;$/;"	m	struct:srp_st
uint32	t_sha.h	/^typedef unsigned int uint32;$/;"	t
usage	srp6bench.c	/^usage()$/;"	f
usage	srpbench.c	/^usage()$/;"	f
usage	tconf.c	/^usage()$/;"	f
userbuf	t_pwd.h	/^  char userbuf[MAXUSERLEN];$/;"	m	struct:t_pw
username	srp.h	/^  cstr * username;$/;"	m	struct:srp_st
username	t_client.h	/^  char username[MAXUSERLEN];$/;"	m	struct:t_client
v	t_client.h	/^  struct t_num v;$/;"	m	struct:t_client	typeref:struct:t_client::t_num
v	t_server.h	/^  struct t_num v;$/;"	m	struct:t_server	typeref:struct:t_server::t_num
vbuf	t_client.h	/^  unsigned char pbuf[MAXPARAMLEN], vbuf[MAXPARAMLEN];$/;"	m	struct:t_client
vbuf	t_server.h	/^  unsigned char nbuf[MAXPARAMLEN], gbuf[MAXPARAMLEN], vbuf[MAXPARAMLEN];$/;"	m	struct:t_server
verbose	tconf.c	/^int  verbose = 0;$/;"	v
verifier	srp.h	/^  BigInteger verifier;$/;"	m	struct:srp_st
verify	srp.h	/^  SRP_RESULT (_CDECL * verify)(SRP * srp,$/;"	m	struct:srp_meth_st
vflag	srptest.c	/^int vflag = 0;$/;"	v
volatile	acconfig.h	31;"	d
